found = 0
for t in tokens
  sd = t.data.scopes[0].data
  if sd.Model is 'Teacher' and sd.query._id.toString() is @teacher._id.toString()
    found++
  else if sd.Model is 'OAuthClient' and sd.query._id.toString() is client._id.toString()
    found++
    grants = _(t._grants).map String
    assert _(client._permissions).chain().map(String).intersection(grants).value().length
assert.equal found, 2

tokens_for = (model, id) ->
  _.filter tokens, (token) ->
    scope = token.data.scopes[0].data
    scope.Model is model and String(scope.query._id) is String(id)
  
assert.equal tokens_for('Teacher', @teacher._id).length, 1, 'Expected blah blah blah'
client_tokens = tokens_for('OAuthClient', client._id)
assert.equal client_tokens.length, 1, 'Expected blah blah blah'
assert # the other thing handled on L81-82, now using client_tokens[0]
