// Generated by CoffeeScript 1.6.3
var async, _,
  __slice = [].slice;

_ = require('underscore');

async = require('async');

_.mixin({
  mapValues: function(obj, f) {
    return _.object(_.keys(obj), _.map(obj, f));
  }
});

module.exports = {
  lift: function(f) {
    return function() {
      var args, cb, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return setImmediate(function() {
        var e, results;
        try {
          results = f.apply(null, args);
        } catch (_error) {
          e = _error;
          return cb(e);
        }
        results = (function() {
          switch (false) {
            case !_.isArray(results):
              return results;
            case !_.isUndefined(results):
              return [];
            default:
              return [results];
          }
        })();
        return cb.apply(null, [null].concat(__slice.call(results)));
      });
    };
  },
  tap: function(f) {
    return function() {
      var args, cb, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      return setImmediate(function() {
        var e;
        try {
          f.apply(null, args);
        } catch (_error) {
          e = _error;
          return cb(e);
        }
        return cb.apply(null, [null].concat(__slice.call(args)));
      });
    };
  },
  once: function(f) {
    var called_f, cbs, saved;
    saved = null;
    called_f = false;
    cbs = [];
    return function() {
      var args, cb, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
      switch (false) {
        case !(called_f && (saved != null)):
          return setImmediate(function() {
            return cb.apply(null, saved);
          });
        case !(called_f && (saved == null)):
          return cbs.push(cb);
        case !!called_f:
          called_f = true;
          return f.apply(null, __slice.call(args).concat([function() {
            var results;
            results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            saved = results;
            return _.each([cb].concat(cbs), function(cb) {
              return cb.apply(null, results);
            });
          }]));
      }
    };
  },
  mapValues: function(obj, f, cb) {
    var tasks;
    tasks = _.mapValues(obj, function(val, key) {
      return function(cb_p) {
        return f(val, key, cb_p);
      };
    });
    return async.parallel(tasks, function(err, res) {
      return cb(err, (err == null ? res : void 0));
    });
  }
};
